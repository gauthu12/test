from flask import Flask, render_template, jsonify, requestimport requestsfrom requests.auth import HTTPBasicAuthimport sqlite3import osapp = Flask(__name__)# Jenkins CredentialsJENKINS_URL = "http://your-jenkins-url"JENKINS_USER = "your-jenkins-username"JENKINS_TOKEN = "your-jenkins-api-token"# Confluence CredentialsCONFLUENCE_URL = "https://your-confluence-url"CONFLUENCE_USER = "your-confluence-username"CONFLUENCE_TOKEN = "your-confluence-api-token"# Database Setup (SQLite)DB_PATH = "chat_history.db"if not os.path.exists(DB_PATH):    conn = sqlite3.connect(DB_PATH)    cursor = conn.cursor()    cursor.execute("""        CREATE TABLE chats (            id INTEGER PRIMARY KEY AUTOINCREMENT,            user_message TEXT,            bot_response TEXT        )    """)    conn.commit()    conn.close()# Tool Optionstool_options = {    'jenkins': {        'options': ['Build Job', 'Pipeline', 'Plugins'],        'Build Job': ['Create New Job', 'List All Jobs', 'Configure Job'],        'Pipeline': ['Create Pipeline', 'View Pipeline', 'Delete Pipeline'],        'Plugins': ['Install Plugin', 'List Installed Plugins', 'Update Plugin']    },    'bitbucket': {        'options': ['Repositories', 'Pull Requests', 'Branches'],        'Repositories': ['Create Repo', 'Clone Repo', 'List Repositories'],        'Pull Requests': ['Create PR', 'Merge PR', 'View PRs'],        'Branches': ['Create Branch', 'Delete Branch', 'View Branches']    },    'jira': {        'options': ['Issues', 'Boards', 'Projects'],        'Issues': ['Create Issue', 'View Issues', 'Assign Issues'],        'Boards': ['Create Board', 'View Boards', 'Manage Boards'],        'Projects': ['Create Project', 'View Projects', 'Manage Projects']    },    'confluence': {        'options': ['Spaces', 'Pages', 'Templates'],        'Spaces': ['Create Space', 'View Spaces', 'Manage Spaces'],        'Pages': ['Create Page', 'Edit Page', 'View Pages'],        'Templates': ['Create Template', 'List Templates', 'Use Template']    }}# Route to render chatbot UI@app.route('/')def index():    return render_template('index.html')# Fetch tool options dynamically@app.route('/get_options', methods=['POST'])def get_options():    tool = request.json.get('tool')    if tool in tool_options:        return jsonify({'options': tool_options[tool]['options']})    return jsonify({'options': []})# Fetch sub-options dynamically@app.route('/get_sub_options', methods=['POST'])def get_sub_options():    tool = request.json.get('tool')    choice = request.json.get('choice')    if tool in tool_options and choice in tool_options[tool]:        return jsonify({'sub_options': tool_options[tool][choice]})    return jsonify({'sub_options': []})# Jenkins: Get job list@app.route('/jenkins/jobs', methods=['GET'])def get_jenkins_jobs():    response = requests.get(f"{JENKINS_URL}/api/json", auth=(JENKINS_USER, JENKINS_TOKEN))    if response.status_code == 200:        jobs = [job["name"] for job in response.json().get("jobs", [])]        return jsonify({"jobs": jobs})    return jsonify({"error": "Failed to fetch Jenkins jobs"}), 500# Jenkins: Trigger a job build@app.route('/jenkins/build', methods=['POST'])def trigger_jenkins_build():    job_name = request.json.get("job_name")    response = requests.post(f"{JENKINS_URL}/job/{job_name}/build", auth=(JENKINS_USER, JENKINS_TOKEN))    if response.status_code == 201:        return jsonify({"message": f"Build triggered for {job_name}"})    return jsonify({"error": "Failed to trigger Jenkins job"}), 500# Confluence: Get page list@app.route('/confluence/pages', methods=['GET'])def get_confluence_pages():    response = requests.get(f"{CONFLUENCE_URL}/rest/api/content", auth=HTTPBasicAuth(CONFLUENCE_USER, CONFLUENCE_TOKEN))    if response.status_code == 200:        pages = [page["title"] for page in response.json().get("results", [])]        return jsonify({"pages": pages})    return jsonify({"error": "Failed to fetch Confluence pages"}), 500# Confluence: Create a page@app.route('/confluence/create_page', methods=['POST'])def create_confluence_page():    title = request.json.get("title")    content = request.json.get("content")    data = {        "type": "page",        "title": title,        "space": {"key": "YOUR_SPACE_KEY"},        "body": {"storage": {"value": content, "representation": "storage"}}    }    response = requests.post(        f"{CONFLUENCE_URL}/rest/api/content",        json=data,        auth=HTTPBasicAuth(CONFLUENCE_USER, CONFLUENCE_TOKEN),        headers={"Content-Type": "application/json"}    )    if response.status_code == 200 or response.status_code == 201:        return jsonify({"message": "Page created successfully"})    return jsonify({"error": "Failed to create Confluence page"}), 500# Store chat in databasedef store_chat(user_message, bot_response):    conn = sqlite3.connect(DB_PATH)    cursor = conn.cursor()    cursor.execute("INSERT INTO chats (user_message, bot_response) VALUES (?, ?)", (user_message, bot_response))    conn.commit()    conn.close()# Get chat history@app.route('/chat_history', methods=['GET'])def get_chat_history():    conn = sqlite3.connect(DB_PATH)    cursor = conn.cursor()    cursor.execute("SELECT user_message, bot_response FROM chats ORDER BY id DESC LIMIT 10")    chats = cursor.fetchall()    conn.close()    return jsonify({"history": [{"user": c[0], "bot": c[1]} for c in chats]})# Run Flask Appif __name__ == '__main__':    app.run(debug=True)